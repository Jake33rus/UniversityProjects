<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        XLCc5AAAAABJRU5ErkJggg==
</value>
  </data>
</root>